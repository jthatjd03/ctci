public boolean search(Node node, int val){
	if(node==null){
		return false;
	}

	if(node.val==val){
		return true; 
	}else if (val < node.val){
		return search(node.left);
	}else{
		return search(node.right);
	}	
}


//delete node without children
//delete node with both children
//delete node with one child
public Node delete(Node node, int value){
	if(node == null){
		return null;	
	}
	if(val == node.val){
		if(node.left == null){
			return node.right;
		}
		if(node.right == null){
			return node.left;
		}
		int highestVal = findHighest(node.left);
		node.val = highestVal;
		node.left = delete(node.left, node.val);
	}
	if(val < node.val){
		node.left = delete(node.left, val);
	}
	if(val > node.val){
		node.right = delete(node.right, val);
	}

	return node;
}
public int findHighest(Node node){
	while(node.right!=null){
		node = node.right;
	}
	return node.val;
}

public Node insert(Node node, int val){
	if(node == null){
		Node newNode = new Node(val);
		return newNode;
	}
	if(val < node.left){
		insert(node.left, val);
	}
	if(node > node.right){
		insert(node.right, val);
	}
	return node;
}

//m = num rows;
//n = num cols;
public void printMatrix(int[][] matrix){
	int length = matrix.length * matrix[0].length;		
	int row = 0;
	int col = 0;

	int m = matrix.length;
	int n = matrix[0].length;	
	while(m >0 && n >0){
		if(m==1){
			for(int i =0;i<n;i++){
				System.out.println(matrix[row][col]);
				col++:
			}
			break;
		}
		if(n==1){
			for(int i =0;i<m;i++){
				System.out.println(matrix[row][col]);
				row++;
			}
			break;
		}
		for(int i =0;i<n - 1;i++){		
			System.out.println(matrix[row][col]);
			row++;
		}
		for(int i =0;i<m - 1;i++){		
			System.out.println(matrix[row][col]);
			col++;
		}
		for(int i =0;i<n-1;i++){
			System.out.println(matrix[row][col]);
			row--;
		}
		for(int i -0;<m-1;i++){
			System.out.println(matrix[row][col])'
			col++;
		}
		row++;
		col++;
		m = m-2;
		n = n-2;
	}	
}
    public int[][] generateMatrix(int n) {
        int[][] matrix = new int[n][n];
        int row = 0;
        int col = 0;
        int step = 0;
        
        int num =0;
        while(n>=0){
        	for(int i =0;i<n-1;i++){
        		matrix[row][col] = num;
        		col++
        		num++;
        	}
        	for(int i = 0;i<n-1;j++){
        		matrix[row][col] = num;
        		row++;
        		num++;
        	}
        	for(int i = 0;i<n-1;i++){
        		matrix[row][col] = num;
        		col--;
        		num++;
        	}
        	for(int i =0;i<n-1;i++){
        		matrix[row][col] = num;
        		row--;
        		num++;
        	}
        	n = n-2;
        }
        return matrix;
    }
