public Node convert(TreeNode root){
	if(root == null){
		return null;
	}
	Deque<TreeNode> stack = new ArrayDeque();
	stack.addFirst(root);
	TreeNode track = root;
	Node previous = new Node(-1);
	Node listNode = null;
	while(!stack.isEmpty() || track !=null){
		if(track != null){
			stack.addFirst(track);
			track = track.left;
		}else{
			TreeNode node = stack.removeFirst();
			listNode = new Node(node.val);
			previous.next = listNode;
			listNode.previous = previous;
			previous = listNode;
			track = node.right;
		}
	}
	Node toReturn = previous.next;
	toReturn.previous = null;
	return toReturn;
}

public void levelByLevelTraversal(TreeNode root){
	if(root==null){
		return;
	}
	Deque<TreeNode> parent = new ArrayDeque();
	Deque<TreeNode> children;
	parent.addLast(root);
	while(!parent.isEmpty()){
		children = new ArrayDeque();
		while(!parent.isEmpty()){
			TreeNode node = parent.removeFirst();
			System.out.print(node.val + " ");
			if(node.left != null){
				children.addLast(node.left);
			}
			if(node.right != null){
				children.addLast(node.right);
			}
		}
		System.out.println();
		parent = children;
	}
}

public List<Integer> threeSum(int[] nums){
	Arrays.sort(nums);
	List<List<Integer>> toReturn = new ArrayList<>();
	for(int i =0;i<list.size()-2;i++){
		if(nums[i] == nums[i-1] && i!=0){
			continue;
		}

		int low = i + 1;
		int high = list.size() - 1;
		int numToFind = -nums[i];
		while(low < high){
			if(nums[low] + nums[high] == numToFind){
				List<Integer> list = new ArrayList();
				list.add(i);
				list.add(low);
				list.add(high);
				toRetunr.add(list);
				low++;
				high--;
				while(low < high && nums[low]==nums[low-1]){
					low++;
				}
				while(low < high && nums[high]==nums[high + 1]){
					high++;
				}
			}else if (nums[low] + nums[high] < numToFind){
				low++;
			}else{
				high++;
			}
		}

	}
	return toReturn;
}
// move all 0s to the front of an integer array. 
public void move(int[] array){
	//[5,4,2,0,7,1,0,4,0]
	int replaceIndex = 0;
	for(int i =0;i<array.length;i++){
		int num = array[i];
		if(num == 0){
			array[i] = array[replaceIndex];
			array[replaceIndex] = 0;
			replaceIndex++;
		}
	}	
}

//given a target and a sorted array, find the highest value smaller than the target. 
public static int findHighest(int[] array, int target) {
    //[1, 3, 5, 6, 7, 8, 9]5
    int low = 0;
    int high = array.length - 1;
    int bestSoFar = -1;
    while (low <= high) {
        int med = (low + high) / 2;
        if (target <= array[med]) {
            high = med - 1;
        } else {
            bestSoFar = med;
            low = med + 1;
        }
    }
    return bestSoFar == -1 ? -1 : array[bestSoFar];
}

// given a 0-1 matrix, find the largest graph that is 1-connected
public static int findLargestConnected(int[][] matrix) {
    int currentMax = 0;
    for (int row = 0; row < matrix.length; row++) {
        for (int col = 0; col < matrix[0].length; col++) {
            if (matrix[row][col] == 1) {
                int count = flipOnes(matrix, row, col);
                currentMax = Math.max(currentMax, count);
            }
        }
    }
    return currentMax;
}

public static int flipOnes(int[][] matrix, int row, int col) {
    if (row < 0 || row >= matrix.length || col < 0 || col >= matrix[0].length || matrix[row][col] == 0) {
        return 0;
    }

    matrix[row][col] = 0;
    int down = flipOnes(matrix, row + 1, col);
    int up = flipOnes(matrix, row - 1, col);
    int right = flipOnes(matrix, row, col + 1);
    int left = flipOnes(matrix, row, col - 1);

    return 1 + down + up + right + left;
}

public int[] addOne(int[] array){
	int index = array.length - 1;
	while(index >= 0){
		if(array[index] == 9){
			array[index] = 0;
			index--;
		}else{
			array[index] = array[index] + 1;
			return array;
		}
	}
	int[] toReturn = new int[array.length + 1];
	toReturn[0] = 0;
	return toReturn;
}